// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc319.BobBAE2013.subsystems;
import org.usfirst.frc319.BobBAE2013.RobotMap;
import org.usfirst.frc319.BobBAE2013.commands.*;
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.command.Subsystem;
/**
 *
 */
public class Shooter extends Subsystem {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    SpeedController frontWheel = RobotMap.shooterFrontWheel;
    SpeedController backWheel = RobotMap.shooterBackWheel;
    Solenoid trigger = RobotMap.shooterTrigger;
    Solenoid feeder = RobotMap.shooterFeeder;
    DigitalInput rightBobStop = RobotMap.shooterRightBobStop;
    DigitalInput leftBobStop = RobotMap.shooterLeftBobStop;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    // Put methods for controlling this subsystem
    // here. Call these from Commands.
    public void initDefaultCommand() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	setDefaultCommand(new TriggerExtend());
        // Set the default command for a subsystem here.
        //setDefaultCommand(new MySpecialCommand());
    }
    public void Spin (){
        frontWheel.set(-0.5);
        backWheel.set(1);
        //Begins to spin both wheels (big,small)
    }
    
    public void Stop () {
        frontWheel.set(0);
        backWheel.set(0);
        //Stops the spinning of the wheel.
    }
    
    public void TriggerExtend() {
        trigger.set(false);
        // Puts trigger in extended position
    }
    
    public void TriggerRetract() {
        trigger.set(true);
        // Puts trigger in retracted position
    }
    public void FeederExtend() {
        feeder.set(true);
        //Puts feeder in extended position
    }
    
    public void FeederRetract() {
        feeder.set(false);
        //Puts feeder in retracted position
    }
    
    public boolean GetLimitSwitchLeft(){
        return leftBobStop.get();
        //Gets the state of the left shooter limit switch
        
    }
    public boolean GetLimitSwitchRight(){
        return rightBobStop.get();
        //Gets the state of the right shooter limit switch
    }
}
