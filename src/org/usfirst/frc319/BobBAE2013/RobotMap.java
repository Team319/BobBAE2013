// RobotBuilder Version: 0.0.2
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
package org.usfirst.frc319.BobBAE2013;
    
import edu.wpi.first.wpilibj.*;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.Encoder.PIDSourceParameter;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import java.util.Vector;
/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static DoubleSolenoid elevatorPneumaticsArm;
    public static Solenoid elevatorPneumaticsWheel;
    public static DoubleSolenoid elevatorPneumaticsLock;
    public static Compressor pneumaticsCompressor;
    public static SpeedController shooterFrontWheel;
    public static SpeedController shooterBackWheel;
    public static Solenoid shooterTrigger;
    public static Solenoid shooterFeeder;
    public static DigitalInput shooterRightBobStop;
    public static DigitalInput shooterLeftBobStop;
    public static SpeedController driveTrainLeftSpeedController;
    public static SpeedController driveTrainRightSpeedController;
    public static RobotDrive driveTrainTankDrive;
    public static Solenoid dumperTrapdoor;
    public static SpeedController elevatorSpeedController;
    public static Encoder elevatorEncoder;
    public static DigitalInput elevatorHomeLimitSwitch;
    public static DigitalInput elevatorLeftLimitSwitch;
    public static DigitalInput elevatorRightLimitSwitch;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        
        shooterTrigger = new Solenoid(1, 1);
	LiveWindow.addActuator("Shooter", "Trigger", shooterTrigger);
        
        shooterFeeder = new Solenoid(1, 2);
	LiveWindow.addActuator("Shooter", "Feeder", shooterFeeder);
        
        dumperTrapdoor = new Solenoid(1, 3);
	LiveWindow.addActuator("Dumper", "Trap Door", dumperTrapdoor);
        
        elevatorPneumaticsArm = new DoubleSolenoid(1, 4, 5);
        
        elevatorPneumaticsLock = new DoubleSolenoid(1, 6, 7); 
        
        elevatorPneumaticsWheel = new Solenoid(1, 8);
	LiveWindow.addActuator("ElevatorPneumatics", "Wheel", elevatorPneumaticsWheel);
        
        
        
        driveTrainLeftSpeedController = new Victor(1, 1);
	LiveWindow.addActuator("DriveTrain", "LeftSpeedController", (Victor) driveTrainLeftSpeedController);
        
        driveTrainRightSpeedController = new Victor(1, 2);
	LiveWindow.addActuator("DriveTrain", "RightSpeedController", (Victor) driveTrainRightSpeedController);
        
        shooterFrontWheel = new Victor(1, 3);
	LiveWindow.addActuator("Shooter", "FrontWheel", (Victor) shooterFrontWheel);
        
        shooterBackWheel = new Victor(1, 4);
	LiveWindow.addActuator("Shooter", "BackWheel", (Victor) shooterBackWheel);
        
        elevatorSpeedController = new Victor(1, 5);
	LiveWindow.addActuator("Elevator", "SpeedController", (Victor) elevatorSpeedController);
        
        
        
        pneumaticsCompressor = new Compressor(1, 5, 1, 8);
	
        
        shooterRightBobStop = new DigitalInput(1, 1);
	LiveWindow.addSensor("Shooter", "RightBobStop", shooterRightBobStop);
        
        shooterLeftBobStop = new DigitalInput(1, 2);
	LiveWindow.addSensor("Shooter", "LeftBobStop", shooterLeftBobStop);
        
        elevatorHomeLimitSwitch = new DigitalInput(1, 7);
	LiveWindow.addSensor("Elevator", "HomeLimitSwitch", elevatorHomeLimitSwitch);
        
        elevatorLeftLimitSwitch = new DigitalInput(1, 8);
	LiveWindow.addSensor("Elevator", "LeftLimitSwitch", elevatorLeftLimitSwitch);
        
        elevatorRightLimitSwitch = new DigitalInput(1, 9);
	LiveWindow.addSensor("Elevator", "RightLimitSwitch", elevatorRightLimitSwitch);
        
        
        
        driveTrainTankDrive = new RobotDrive(driveTrainLeftSpeedController, driveTrainRightSpeedController);
	
        driveTrainTankDrive.setSafetyEnabled(false);//ASK ABOUT THIS
        driveTrainTankDrive.setExpiration(0.1);
        driveTrainTankDrive.setSensitivity(0.5);
        driveTrainTankDrive.setMaxOutput(1.0);
        driveTrainTankDrive.setInvertedMotor(RobotDrive.MotorType.kRearLeft, true); 
	
        
        elevatorEncoder = new Encoder(1, 3, 1, 4, false, EncodingType.k4X);
	LiveWindow.addSensor("Elevator", "Encoder", elevatorEncoder);
        elevatorEncoder.setDistancePerPulse(1.0);
        elevatorEncoder.setPIDSourceParameter(PIDSourceParameter.kDistance);
        elevatorEncoder.start();
        
        
        
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
